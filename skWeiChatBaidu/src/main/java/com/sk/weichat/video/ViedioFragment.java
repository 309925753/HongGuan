package com.sk.weichat.video;import android.animation.AnimatorSet;import android.animation.ObjectAnimator;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.ImageFormat;import android.graphics.Rect;import android.graphics.SurfaceTexture;import android.hardware.Camera;import android.hardware.SensorManager;import android.media.MediaPlayer;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.text.TextUtils;import android.util.Log;import android.view.GestureDetector;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.OrientationEventListener;import android.view.Surface;import android.view.TextureView;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.RelativeLayout;import androidx.fragment.app.Fragment;import com.alibaba.fastjson.JSON;import com.joe.camera2recorddemo.Entity.SizeInfo;import com.joe.camera2recorddemo.OpenGL.CameraRecorder;import com.joe.camera2recorddemo.OpenGL.Filter.Mp4EditFilter;import com.joe.camera2recorddemo.OpenGL.Renderer;import com.joe.camera2recorddemo.Utils.MatrixUtils;import com.sk.weichat.AppConstant;import com.sk.weichat.MyApplication;import com.sk.weichat.R;import com.sk.weichat.Reporter;import com.sk.weichat.bean.VideoFile;import com.sk.weichat.bean.event.MessageLocalVideoFile;import com.sk.weichat.bean.event.MessageVideoFile;import com.sk.weichat.helper.CutoutHelper;import com.sk.weichat.helper.DialogHelper;import com.sk.weichat.ui.me.LocalVideoActivity;import com.sk.weichat.util.FileUtil;import com.sk.weichat.util.RecorderUtils;import com.sk.weichat.util.ScreenUtil;import com.sk.weichat.util.VideoCompressUtil;import com.sk.weichat.view.MyVideoView;import com.sk.weichat.view.cjt2325.cameralibrary.CameraInterface;import com.sk.weichat.view.cjt2325.cameralibrary.CaptureLayout;import com.sk.weichat.view.cjt2325.cameralibrary.FoucsView;import com.sk.weichat.view.cjt2325.cameralibrary.listener.CaptureListener;import com.sk.weichat.view.cjt2325.cameralibrary.listener.ClickListener;import com.sk.weichat.view.cjt2325.cameralibrary.listener.TypeListener;import com.sk.weichat.view.cjt2325.cameralibrary.util.CameraParamUtil;import com.sk.weichat.view.imageedit.IMGEditActivity;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;import Jni.VideoUitls;import VideoHandle.OnEditorListener;import de.greenrobot.event.EventBus;import de.greenrobot.event.Subscribe;import de.greenrobot.event.ThreadMode;/** * A simple {@link Fragment} subclass. */public class ViedioFragment extends Fragment implements View.OnClickListener, Renderer {    public static final int REQUEST_IMAGE_EDIT = 1;    private static final String TAG = "VideoRecorderActivity";    private static final int REQUEST_CODE_SELECT_VIDEO = 3;    // 录制时长限制    private static final int mRecordMaxTime = 10 * 1000;    private static final int mRecordMinTime = 1000;    public int mCameraWidth, mCameraHeight;    int handlerTime = 0;    boolean isClicked = false;// 标志位，已点击confirm，防止反复调用complete()方法    // 控件    private TextureView mTextureView;    private ImageView mPhotoView;    private MyVideoView mVideoView;    private RelativeLayout mSetRelativeLayout;    private CaptureLayout mCaptureLayout;    private FoucsView mFoucsView;    // 变量    private Camera mCamera;    private Camera.Parameters mParams;    private float screenProp;    private int mCurrentCameraState;    private boolean isTakePhoto;// 当前为 拍照 || 录像    private boolean isRecord;    // 拍照显示的bitmap    private Bitmap mCurrentBitmap;    // 编辑图片之后的图片路径    private String mEditedImagePath;    // 录制视频的路径    private String mCurrentVideoPath;    // 录制视频的时长    private int mCurrentTime;    private CameraRecorder mCameraRecord;    private Mp4EditFilter mFilter;    FilterPreviewDialog.OnUpdateFilterListener mFilterListener = new FilterPreviewDialog.OnUpdateFilterListener() {        @Override        public void select(int type) {            mFilter.getChooseFilter().setChangeType(type);        }        @Override        public void dismiss() {        }    };    private GestureDetector mGestureDetector;    private SVCGestureListener mGestureListener = new SVCGestureListener();    private VideoRecorderActivity.MyOnTouchListener myOnTouchListener;    private FilterPreviewDialog mFilterDialog;    private AlbumOrientationEventListener mAlbumOrientationEventListener;    // 初始状态不旋转，    private int mOrientation = 0;    public ViedioFragment() {        // Required empty public constructor    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        View view = inflater.inflate(R.layout.fragment_viedio, container, false);        initView(view);        if (getUserVisibleHint()) {            initRecorder();        }        initEvent(view);        EventBus.getDefault().register(this);        mGestureDetector = new GestureDetector(getActivity(), mGestureListener);        mGestureDetector.setIsLongpressEnabled(true);        mGestureDetector.setOnDoubleTapListener(mGestureListener);        myOnTouchListener = new VideoRecorderActivity.MyOnTouchListener() {            @Override            public boolean onTouch(MotionEvent ev) {                return mGestureDetector.onTouchEvent(ev);            }        };        ((VideoRecorderActivity) getActivity()).registerMyOnTouchListener(myOnTouchListener);        mTextureView.postDelayed(() -> {            // 有可能页面已经回收了，            if (getContext() == null) {                return;            }            setFocusViewAnimation(ScreenUtil.getScreenWidth(requireContext()) / 2, ScreenUtil.getScreenHeight(requireContext()) / 2);        }, 1000);        return view;    }    @Override    public void onDestroyView() {        EventBus.getDefault().unregister(this);        super.onDestroyView();    }    @Override    public void setUserVisibleHint(boolean isVisibleToUser) {        super.setUserVisibleHint(isVisibleToUser);        if (isVisibleToUser) {            if (getView() != null) {                rebuild();            }        } else {            if (getView() != null) {                release();            }        }    }    private void rebuild() {        initRecorder();    }    private void release() {        stopPreview();        reset();    }    @Override    public void onDestroy() {        super.onDestroy();        mAlbumOrientationEventListener.disable();        if (mFilter != null)            mFilter.destroy();        ((VideoRecorderActivity) getActivity()).unregisterMyOnTouchListener(myOnTouchListener);    }    private void initView(View view) {        CutoutHelper.initCutoutHolderTop(requireActivity().getWindow(), view.findViewById(R.id.vCutoutHolder));        mAlbumOrientationEventListener = new AlbumOrientationEventListener(requireContext(), SensorManager.SENSOR_DELAY_NORMAL);        if (mAlbumOrientationEventListener.canDetectOrientation()) {            mAlbumOrientationEventListener.enable();        } else {            Log.e("zx", "不能获取Orientation");        }        mTextureView = view.findViewById(R.id.mTexture);        mPhotoView = view.findViewById(R.id.image_photo);        mVideoView = view.findViewById(R.id.video_preview);        mSetRelativeLayout = view.findViewById(R.id.set_rl);        mCaptureLayout = view.findViewById(R.id.capture_layout);        mCaptureLayout.setButtonFeatures(0x102);   //只能录像        boolean videoOnly = requireActivity().getIntent().getBooleanExtra("videoOnly", false);        if (!videoOnly) {            mCaptureLayout.setIconSrc(0, R.drawable.ic_sel_local_video);        }        mFoucsView = view.findViewById(R.id.fouce_view);    }    private void initRecorder() {        mFilter = new Mp4EditFilter(getResources());        mFilterDialog = new FilterPreviewDialog(requireContext(), mFilterListener);        mCameraRecord = new CameraRecorder();        mCurrentVideoPath = RecorderUtils.getVideoFileByTime();        mCameraRecord.setOutputPath(mCurrentVideoPath);        TextureView.SurfaceTextureListener listener = new TextureView.SurfaceTextureListener() {            @Override            public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {                mCamera = Camera.open(0);                screenProp = (float) height / (float) width;                initCamera(screenProp);                mCameraRecord.setOutputSurface(new Surface(surface));                Camera.Size videoSize;                if (mParams.getSupportedVideoSizes() == null) {                    videoSize = CameraParamUtil.getInstance().getPreviewSize(mParams.getSupportedPreviewSizes(), 600,                            screenProp);                } else {                    videoSize = CameraParamUtil.getInstance().getPreviewSize(mParams.getSupportedVideoSizes(), 600,                            screenProp);                }                SizeInfo sizeInfo;                if (videoSize.width == videoSize.height) {                    sizeInfo = new SizeInfo(720, 720);                } else {                    sizeInfo = new SizeInfo(videoSize.height, videoSize.width);                }                mCameraRecord.setOutputSize(sizeInfo);                mCameraRecord.setRenderer(ViedioFragment.this);                mCameraRecord.setPreviewSize(width, height);                mCameraRecord.startPreview();            }            @Override            public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {                mCameraRecord.setPreviewSize(width, height);            }            @Override            public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {                if (isRecord) {                    isRecord = false;                    try {                        mCameraRecord.stopRecord();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }                stopPreview();                return true;            }            @Override            public void onSurfaceTextureUpdated(SurfaceTexture surface) {            }        };        if (mTextureView.isAvailable()) {            listener.onSurfaceTextureAvailable(mTextureView.getSurfaceTexture(), mTextureView.getWidth(), mTextureView.getHeight());        }        mTextureView.setSurfaceTextureListener(listener);    }    @Override    public void create() {        try {            mCamera.setPreviewTexture(mCameraRecord.createInputSurfaceTexture());        } catch (IOException e) {            e.printStackTrace();        }        Camera.Size mSize = mCamera.getParameters().getPreviewSize();        mCameraWidth = mSize.height;        mCameraHeight = mSize.width;        mCamera.startPreview();        mFilter.create();    }    @Override    public void sizeChanged(int width, int height) {        mFilter.sizeChanged(width, height);        MatrixUtils.getMatrix(mFilter.getVertexMatrix(), MatrixUtils.TYPE_CENTERCROP,                mCameraWidth, mCameraHeight, width, height);        MatrixUtils.flip(mFilter.getVertexMatrix(), false, true);    }    @Override    public void draw(int texture) {        mFilter.draw(texture);    }    @Override    public void destroy() {    }    public void initCamera(float screenProp) {        if (mCamera != null) {            mParams = mCamera.getParameters();            Camera.Size previewSize = CameraParamUtil.getInstance().getPreviewSize(mParams                    .getSupportedPreviewSizes(), 1000, screenProp);            Camera.Size pictureSize = CameraParamUtil.getInstance().getPictureSize(mParams                    .getSupportedPictureSizes(), 1200, screenProp);            mParams.setPreviewSize(previewSize.width, previewSize.height);            mParams.setPictureSize(pictureSize.width, pictureSize.height);            if (CameraParamUtil.getInstance().isSupportedFocusMode(                    mParams.getSupportedFocusModes(),                    Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO)) {                mParams.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);            }            if (CameraParamUtil.getInstance().isSupportedPictureFormats(mParams.getSupportedPictureFormats(),                    ImageFormat.JPEG)) {                mParams.setPictureFormat(ImageFormat.JPEG);                mParams.setJpegQuality(100);            }            mCamera.setParameters(mParams);            mParams = mCamera.getParameters();        }    }    private void initEvent(View view) {        mCaptureLayout.setDuration(mRecordMaxTime);        mCaptureLayout.setMinDuration(mRecordMinTime);        mCaptureLayout.setCaptureLisenter(new CaptureListener() {            @Override            public void takePictures() {                /*isTakePhoto = true;                mCamera.takePicture(null, null, new Camera.PictureCallback() {                    @Override                    public void onPictureTaken(byte[] data, Camera camera) {                        mCurrentBitmap = BitmapFactory.decodeByteArray(data, 0, data.length);                        Camera.CameraInfo info = new Camera.CameraInfo();                        Camera.getCameraInfo(mCurrentCameraState, info);                        if (info.facing == Camera.CameraInfo.CAMERA_FACING_BACK) { // 后置摄像头拍摄出来的照片需要旋转90'                            mCurrentBitmap = CameraUtil.restoreRotatedImage(info.orientation, mCurrentBitmap);                        } else {// 前置摄像头拍出的图片需要先旋转270',在左右翻转一次                            mCurrentBitmap = CameraUtil.restoreRotatedImage(info.orientation, mCurrentBitmap);                            mCurrentBitmap = CameraUtil.turnCurrentLayer(mCurrentBitmap, -1, 1);                        }                        mCurrentBitmap = CameraUtil.restoreRotatedImage(mOrientation, mCurrentBitmap);                        playPhoto();                        // 继续进行预览                        mCamera.startPreview();                    }                });*/            }            @Override            public void recordStart() {                isTakePhoto = false;                // 开始录制视频                if (startRecord(mCurrentVideoPath)) {                    isRecord = true;                    mCurrentTime = 0;                }            }            @Override            public void recordShort(long time) {                mCaptureLayout.setTextWithAnimation(getString(R.string.tip_record_too_short));                mTextureView.postDelayed(new Runnable() {                    @Override                    public void run() {                        if (stopRecord()) {                            isRecord = false;                            mCurrentTime = 0;                            mCaptureLayout.resetCaptureLayout();                        }                    }                }, mRecordMinTime - time);            }            @Override            public void recordEnd(long time) {                if (stopRecord()) {                    isRecord = false;                    mCurrentTime = (int) (time / 1000);                    playVideo();                }            }            @Override            public void recordZoom(float zoom) {                // 摄像头缩放            }            @Override            public void recordError() {            }        });        //确认 取消        mCaptureLayout.setTypeLisenter(new TypeListener() {            @Override            public void cancel() {                reset();            }            @Override            public void confirm() {                if (isClicked) {                    return;                }                isClicked = true;                complete();            }        });        mCaptureLayout.setLeftClickListener(new ClickListener() {            @Override            public void onClick() {                getActivity().finish();            }        });        mCaptureLayout.setMiddleClickListener(new ClickListener() {            @Override            public void onClick() {// 进行图片编辑                String path = FileUtil.saveBitmap(mCurrentBitmap);                if (!TextUtils.isEmpty(path)) {                    mEditedImagePath = FileUtil.createImageFileForEdit().getAbsolutePath();                    IMGEditActivity.startForResult(requireActivity(), Uri.fromFile(new File(path)), mEditedImagePath, REQUEST_IMAGE_EDIT);                } else {                    DialogHelper.tip(requireContext(), "图片编辑失败");                }            }        });        mCaptureLayout.setRightClickListener(new ClickListener() {            @Override            public void onClick() {// 选择本地视频                Intent intent = new Intent(requireContext(), LocalVideoActivity.class);                intent.putExtra(AppConstant.EXTRA_ACTION, AppConstant.ACTION_SELECT);                intent.putExtra(AppConstant.EXTRA_MULTI_SELECT, true);                startActivityForResult(intent, REQUEST_CODE_SELECT_VIDEO);            }        });        view.findViewById(R.id.iv_swith).setOnClickListener(this);        view.findViewById(R.id.iv_filter).setOnClickListener(this);    }    @Override    public void onClick(final View v) {        switch (v.getId()) {            case R.id.iv_filter:                mFilterDialog.show();                mCaptureLayout.setVisibility(View.INVISIBLE);                mFilterDialog.setOnDismissListener(dialog1 -> {                    mCaptureLayout.setVisibility(View.VISIBLE);                });                break;            case R.id.iv_swith:                changeCamera();                break;        }    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode == Activity.RESULT_OK) {            switch (requestCode) {                case REQUEST_IMAGE_EDIT:                    // 图片编辑返回                    mCurrentBitmap = BitmapFactory.decodeFile(mEditedImagePath);                    mPhotoView.setImageBitmap(mCurrentBitmap);                    break;                case REQUEST_CODE_SELECT_VIDEO:                    // 选择视频返回                    if (data == null) {                        return;                    }                    String json = data.getStringExtra(AppConstant.EXTRA_VIDEO_LIST);                    List<VideoFile> fileList = JSON.parseArray(json, VideoFile.class);                    if (fileList == null || fileList.size() == 0) {                        // 不可到达，列表里有做判断，                        Reporter.unreachable();                    } else {                        for (VideoFile videoFile : fileList) {                            String filePath = videoFile.getFilePath();                            if (TextUtils.isEmpty(filePath)) {                                // 不可到达，列表里有做过滤，                                Reporter.unreachable();                            } else {                                File file = new File(filePath);                                if (!file.exists()) {                                    // 不可到达，列表里有做过滤，                                    Reporter.unreachable();                                } else {                                    EventBus.getDefault().post(new MessageLocalVideoFile(file));                                }                            }                        }                        getActivity().finish();                    }                    break;                default:                    super.onActivityResult(requestCode, resultCode, data);            }        }    }    /**     * 切换摄像头     */    private void changeCamera() {        if (Camera.getNumberOfCameras() > 1) {            stopPreview();            mCurrentCameraState += 1;            if (mCurrentCameraState > Camera.getNumberOfCameras() - 1)                mCurrentCameraState = 0;            mCamera = Camera.open(mCurrentCameraState);            initCamera(screenProp);// 切换摄像头之后需要重新setParameters/*            if (mParams == null) {                initCamera(screenProp);            } else {                // 部分机型 java.lang.RuntimeException: setParameters failed               mCamera.setParameters(mParams);            }*/            mCameraRecord.startPreview();        }    }    /**     * 停止摄像头预览     */    private void stopPreview() {        try {            if (mCameraRecord != null) {                mCameraRecord.stopPreview();            }        } catch (InterruptedException e) {            e.printStackTrace();        }        if (mCamera != null) {            mCamera.stopPreview();            mCamera.release();            mCamera = null;        }    }    /**     * 开始录制     */    private boolean startRecord(String path) {        try {            Log.e(TAG, "开始录制：" + path);            mCameraRecord.startRecord();        } catch (IOException e) {            e.printStackTrace();            return false;        }        return true;    }    /**     * 结束录制     */    private boolean stopRecord() {        try {            mCameraRecord.stopRecord();            return true;        } catch (InterruptedException e) {            e.printStackTrace();        }        return false;    }    /*    预览图片     */    private void playPhoto() {        mSetRelativeLayout.setVisibility(View.GONE);        mPhotoView.setImageBitmap(mCurrentBitmap);        mPhotoView.setVisibility(View.VISIBLE);        mCaptureLayout.startAlphaAnimation();        mCaptureLayout.startTypeBtnAnimator();    }    /*    预览视频     */    private void playVideo() {        mSetRelativeLayout.setVisibility(View.GONE);        mVideoView.setVisibility(View.VISIBLE);        mVideoView.setVideoPath(mCurrentVideoPath);        mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {            @Override            public void onCompletion(MediaPlayer mp) {// 循环播放                mVideoView.start();            }        });        mVideoView.start();    }    private void reset() {        mSetRelativeLayout.setVisibility(View.VISIBLE);        if (isTakePhoto) {            mPhotoView.setVisibility(View.GONE);        } else {            mVideoView.stopPlayback();// 停止播放 并释放资源            mVideoView.setVisibility(View.GONE);        }        mCaptureLayout.resetCaptureLayout();    }    private void complete() {        if (isTakePhoto) {            String path = FileUtil.saveBitmap(mCurrentBitmap);            EventBus.getDefault().post(new MessageEventGpu(path));            getActivity().finish();        } else {            compress(mCurrentVideoPath);        }    }    private void compress(String path) {        DialogHelper.showMessageProgressDialog(getActivity(), MyApplication.getContext().getString(R.string.compressed));        final String out = RecorderUtils.getVideoFileByTime();        String[] cmds = RecorderUtils.ffmpegComprerssCmd(path, out);        long duration = VideoUitls.getDuration(path);        VideoCompressUtil.exec(cmds, duration, new OnEditorListener() {            public void onSuccess() {                DialogHelper.dismissProgressDialog();                mCurrentVideoPath = out;                EventBus.getDefault().post(new MessageVideoFile(mCurrentTime,                        new File(mCurrentVideoPath).length(), mCurrentVideoPath));                getActivity().finish();            }            public void onFailure() {                DialogHelper.dismissProgressDialog();                getActivity().finish();            }            public void onProgress(float progress) {            }        });    }    public void setClick(boolean isClick) {        coverClickState();    }    private void coverClickState() {        // 延时200ms恢复isClick状态        mCaptureLayout.postDelayed(new Runnable() {            @Override            public void run() {            }        }, 200);    }    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(MessageXY message) {        Log.e("zx", "helloEventBus: X: " + message.getX() + " Y: " + message.getY());        /*        延时50ms执行聚焦，50ms足够触发到其他控件的onClick事件，修改isClick的状态，        在到setFocusViewAnimation方法内根据isClick状态判断是否执行对焦         */        mCaptureLayout.postDelayed(new Runnable() {            @Override            public void run() {                // 有可能页面已经回收了，                if (getContext() == null) {                    return;                }                setFocusViewAnimation(message.getX(), message.getY());            }        }, 50);        coverClickState();    }    public boolean setFocusViewAnimation(float x, float y) {        if (y < mSetRelativeLayout.getBottom()) {            return false;        }        if (y > mCaptureLayout.getTop()) {            return false;        }        mFoucsView.setVisibility(View.VISIBLE);        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {            @Override            public void run() {                mFoucsView.setVisibility(View.INVISIBLE);            }        }, 2000);        if (x < mFoucsView.getWidth() / 2) {            x = mFoucsView.getWidth() / 2;        }        if (x > ScreenUtil.getScreenWidth(requireContext()) - mFoucsView.getWidth() / 2) {            x = ScreenUtil.getScreenWidth(requireContext()) - mFoucsView.getWidth() / 2;        }        if (y < mFoucsView.getWidth() / 2) {            y = mFoucsView.getWidth() / 2;        }        if (y > mCaptureLayout.getTop() - mFoucsView.getWidth() / 2) {            y = mCaptureLayout.getTop() - mFoucsView.getWidth() / 2;        }        mFoucsView.setX(x - mFoucsView.getWidth() / 2);        mFoucsView.setY(y - mFoucsView.getHeight() / 2);        ObjectAnimator scaleX = ObjectAnimator.ofFloat(mFoucsView, "scaleX", 1, 0.6f);        ObjectAnimator scaleY = ObjectAnimator.ofFloat(mFoucsView, "scaleY", 1, 0.6f);        ObjectAnimator alpha = ObjectAnimator.ofFloat(mFoucsView, "alpha", 1f, 0.4f, 1f, 0.4f, 1f, 0.4f, 1f);        AnimatorSet animSet = new AnimatorSet();        animSet.play(scaleX).with(scaleY).before(alpha);        animSet.setDuration(400);        animSet.start();        handleFocus(x, y);        return true;    }    public void handleFocus(final float x, final float y) {        if (mCamera == null) {            return;        }        final Camera.Parameters params = mCamera.getParameters();        Rect focusRect = CameraInterface.calculateTapArea(x, y, 1f, requireContext());        mCamera.cancelAutoFocus();        if (params.getMaxNumFocusAreas() > 0) {            List<Camera.Area> focusAreas = new ArrayList<>();            focusAreas.add(new Camera.Area(focusRect, 800));            params.setFocusAreas(focusAreas);        } else {            mFoucsView.setVisibility(View.INVISIBLE);            return;        }        final String currentFocusMode = params.getFocusMode();        try {            params.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);            mCamera.setParameters(params);            mCamera.autoFocus((success, camera) -> {                if (success || handlerTime > 10) {                    Camera.Parameters params1 = camera.getParameters();                    params1.setFocusMode(currentFocusMode);                    camera.setParameters(params1);                    handlerTime = 0;                    mFoucsView.setVisibility(View.INVISIBLE);                } else {                    handlerTime++;                    handleFocus(x, y);                }            });        } catch (Exception e) {        }    }    private class AlbumOrientationEventListener extends OrientationEventListener {        public AlbumOrientationEventListener(Context context) {            super(context);        }        public AlbumOrientationEventListener(Context context, int rate) {            super(context, rate);        }        @Override        public void onOrientationChanged(int orientation) {            if (orientation == OrientationEventListener.ORIENTATION_UNKNOWN) {                return;            }            //保证只返回四个方向            int newOrientation = ((orientation + 45) / 90 * 90) % 360;            if (newOrientation != mOrientation) {                mOrientation = newOrientation;                Log.e("zx", "onOrientationChanged: " + mOrientation);                //返回的mOrientation就是手机方向，为0°、90°、180°和270°中的一个            }        }    }    public class SVCGestureListener implements GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {        @Override        public boolean onDown(MotionEvent e) {            return true;        }        @Override        public void onShowPress(MotionEvent e) {        }        @Override        public boolean onSingleTapUp(MotionEvent e) {            return false;        }        @Override        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {            return false;        }        @Override        public void onLongPress(MotionEvent e) {        }        @Override        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {            return false;        }        @Override        public boolean onSingleTapConfirmed(MotionEvent e) {            EventBus.getDefault().post(new MessageXY(e.getX(), e.getY()));            return false;        }        @Override        public boolean onDoubleTap(MotionEvent e) {            return false;        }        @Override        public boolean onDoubleTapEvent(MotionEvent e) {            return false;        }    }}